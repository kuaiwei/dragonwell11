/* java class generated by java skeleton 0.01
 */
import sun.misc.Unsafe;
import java.lang.reflect.Field;
public class AllocAndCopy {
  static Unsafe getUnsafe() {
      try {
    Field f = Unsafe.class.getDeclaredField("theUnsafe");
    f.setAccessible(true);
    Unsafe unsafe = (Unsafe) f.get(null);
    return unsafe;
      } catch (Exception ex) {
          System.exit(-1);
          return null;
      }
  }
  private static Unsafe unsafe = getUnsafe();

  public static void main(String[] args) throws Exception{
    final int LEN=512;
    int[] s= new int[LEN];
    int mode = Integer.parseInt(args[0]);
    if (mode==1) {
        for (int i=0;i<100000;i++) {
            test1(s, LEN);
        }
    } else {
        for (int i=0;i<100000;i++) {
            test2(s, LEN);
        }
    }
  }

  static int[] test1(int[] source, int len) {
      int[] r = new int[len];
      System.arraycopy(source, 0, r, 0, len);
      return r;
  }

  static int[] test2(int[] source, int len) throws Exception{
      int[] r = new int[len];
      unsafe.copyMemory(source, 16, r, 16, len*4);
      return r;
  }
}
